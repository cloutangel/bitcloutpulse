#!/usr/bin/env /src/bin/php-exec-one
<?php

use App\Component\Coin;
use App\Lib\ArdbStorage;
use Muvon\Bitclout\NodeAPI;
use Muvon\Bitclout\CreatorCoin;

ini_set('memory_limit', '4G');

Cli::print('start');

$contest_height = 41839;
$Storage = ArdbStorage::create();
$Node = NodeAPI::create(config('bitclout'));

$height = $Storage->getLastHeight();

$last_tx = $Storage->getLastTxId();
$skip = !!$last_tx;
while (true) {
  Cli::print('Height #'. $height);
  $block = result($Node->getBlock($height, 'height', true));

  foreach ($block['Transactions'] as $tx) {
    $tx_id = $tx['TransactionIDBase58Check'];
    if ($skip) {
      if ($last_tx === $tx_id) {
        $skip = false;
      }
      continue;
    }
    $Storage->setLastTxId('');

    $tx_meta = $tx['TransactionMetadata'];

    if ($tx['TransactionType'] === 'UPDATE_PROFILE') {
      $meta = $tx_meta['UpdateProfileTxindexMetadata'];

      $pubkey = $tx_meta['TransactorPublicKeyBase58Check'];
      foreach ($tx_meta['AffectedPublicKeys'] as $affected) {
        if ($affected['Metadata'] === 'ProfilePublicKeyBase58Check' && $affected['PublicKeyBase58Check'] !== '8mkU8yaVLs') {
          $pubkey = $affected['PublicKeyBase58Check'];
        }
      }

      $Storage->setCreatorReward($pubkey, $tx['TransactionMetadata']['UpdateProfileTxindexMetadata']['NewCreatorBasisPoints']);
      continue;
    }


    if ($tx['TransactionType'] === 'SWAP_IDENTITY') {
      $meta = $tx_meta['SwapIdentityTxindexMetadata'];
      $reward_from = $Storage->getCreatorReward($meta['FromPublicKeyBase58Check']);
      $reward_to = $Storage->getCreatorReward($meta['ToPublicKeyBase58Check']);

      $Storage->setCreatorReward($meta['FromPublicKeyBase58Check'], $reward_to);
      $Storage->setCreatorReward($meta['ToPublicKeyBase58Check'], $reward_from);

      $coin_from = $Storage->getCreatorCoin($meta['FromPublicKeyBase58Check']);
      $coin_to = $Storage->getCreatorCoin($meta['ToPublicKeyBase58Check']);

      $Storage->setCreatorCoin($meta['FromPublicKeyBase58Check'], $coin_to);
      $Storage->setCreatorCoin($meta['ToPublicKeyBase58Check'], $coin_from);
      continue;
    }

    if ($tx['TransactionType'] !== 'CREATOR_COIN') {
      continue;
    }

    $coin_meta = $tx_meta['CreatorCoinTxindexMetadata'];
    $investor_pubkey = $tx_meta['TransactorPublicKeyBase58Check'];
    $creator_pubkey = null;
    foreach ($tx_meta['AffectedPublicKeys'] as $affected) {
      if ($affected['Metadata'] === 'CreatorPublicKey') {
        $creator_pubkey = $affected['PublicKeyBase58Check'];
      }
    }

    Cli::print([
      $tx_id,
      '  investor = ' . $investor_pubkey,
      '  creator = ' . $creator_pubkey,
      '  operation = ' . $coin_meta['OperationType'],
    ]);

    $Coin = CreatorCoin::create($Storage->getCreatorReward($creator_pubkey))
      ->init(...$Storage->getCreatorCoin($creator_pubkey))
      ->setStrategyByHeight($height)
      ->setIsCreator($investor_pubkey === $creator_pubkey)
    ;
    if ($coin_meta['OperationType'] === 'buy') {
      $nanos = $coin_meta['BitCloutToSellNanos'];
      $last_buy = $Coin->buy($nanos)->getLastBuy();
      $coins = $last_buy['received'];
    } else {
      $coins = $coin_meta['CreatorCoinToSellNanos'];
      $last_sell = $Coin->sell($coins)->getLastSell();
      $nanos = $last_sell['returned'];
    }
    $Storage->setCreatorCoin($creator_pubkey, [
      $Coin->getLocked(),
      $Coin->getSupply(),
      $Coin->getWatermark(),
    ]);

    Cli::print([
      '  coins = ' . bcdiv($coins, 10 ** 9, 9),
      '  clout = ' . bcdiv($nanos, 10 ** 9, 9),
    ]);

    if ($height >= $contest_height) {
      $Storage->storeCoinOperation($investor_pubkey, $creator_pubkey, $coin_meta['OperationType'], $coins, $nanos);
    }
    $Storage->setLastTxId($tx_id);
  }
  $Storage->setLastHeight($height++);
}

Cli::print('done');